connectors:
  spanmetrics: null # each connector has its own docs to be explored for the best usage. For this --> https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/connector/spanmetricsconnector/README.md
exporters:
  debug:
    verbosity: detailed
  logging: {} # depracated in favor of debug
  otlp:
    endpoint: 'my-otel-demo-jaeger-collector:4317'
    tls:
      insecure: true
  otlphttp/prometheus:
    endpoint: http://my-otel-demo-prometheus-server:9090/api/v1/otlp
    tls:
      insecure: true
extensions:
  health_check: {} # not active. more info --> https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/extension/healthcheckextension/README.md
processors:
  batch: {}
  filter/ottl: # seems very useful. filters logs, metrics and traces with custom conditions. very flexible.
    error_mode: ignore # more info --> https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/main/extension/healthcheckextension/README.md
    metrics:
      metric:
      - name == "rpc.server.duration"
  k8sattributes: # allow automatic setting of spans, metrics and logs resource attributes with k8s metadata
    extract: # more info --> https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/k8sattributesprocessor
      metadata:
      - k8s.namespace.name
      - k8s.deployment.name
      - k8s.statefulset.name
      - k8s.daemonset.name
      - k8s.cronjob.name
      - k8s.job.name
      - k8s.node.name
      - k8s.pod.name
      - k8s.pod.uid
      - k8s.pod.start_time
    passthrough: false
    pod_association:
    - sources:
      - from: resource_attribute
        name: k8s.pod.ip
    - sources:
      - from: resource_attribute
        name: k8s.pod.uid
    - sources:
      - from: connection
  memory_limiter: # used to prevent out of memory situations on the collector
    check_interval: 5s # more info --> https://github.com/open-telemetry/opentelemetry-collector/tree/main/processor/memorylimiterprocessor
    limit_percentage: 80
    spike_limit_percentage: 25
  resource: # used to apply changes on resource attributes
    attributes: # more info --> https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/resourceprocessor
    - action: insert
      from_attribute: k8s.pod.uid
      key: service.instance.id
  transform: # modifies telemetry based on configuration using the OpenTelemetry Transformation Language
    metric_statements: # more info --> https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/transformprocessor
    - context: metric
      statements:
      - set(description, "") where name == "queueSize"
      - set(description, "") where name == "rpc.server.duration"
      - set(description, "") where name == "http.client.duration"
receivers:
  jaeger: # more info --> https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/jaegerreceiver
    protocols:
      grpc:
        endpoint: ${env:MY_POD_IP}:14250
      thrift_compact:
        endpoint: ${env:MY_POD_IP}:6831
      thrift_http:
        endpoint: ${env:MY_POD_IP}:14268
  otlp: # more info --> https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver/otlpreceiver
    protocols:
      grpc:
        endpoint: ${env:MY_POD_IP}:4317
      http:
        cors:
          allowed_origins:
          - http://*
          - https://*
        endpoint: ${env:MY_POD_IP}:4318
  prometheus: # is meant to minimally be a drop-in replacement for Prometheus. not all config works out-of-the-box
    config: # more info --> https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/prometheusreceiver
      scrape_configs:
      - job_name: opentelemetry-collector
        scrape_interval: 10s
        static_configs:
        - targets:
          - ${env:MY_POD_IP}:8888
  zipkin:
    endpoint: ${env:MY_POD_IP}:9411
service:
  extensions:
  - health_check
  pipelines:
    logs:
      exporters:
      - debug
      processors:
      - k8sattributes
      - memory_limiter
      - batch
      receivers:
      - otlp
    metrics:
      exporters:
      - otlphttp/prometheus
      - debug
      processors:
      - k8sattributes
      - memory_limiter
      - filter/ottl
      - transform
      - resource
      - batch
      receivers:
      - otlp
      - spanmetrics # connectors connect different services' receivers and exporters. more info --> https://github.com/open-telemetry/opentelemetry-collector/tree/main/connector
    traces:
      exporters:
      - otlp
      - debug
      - spanmetrics # connectors connect different services' receivers and exporters. more info --> https://github.com/open-telemetry/opentelemetry-collector/tree/main/connector
      processors:
      - k8sattributes
      - memory_limiter
      - resource
      - batch
      receivers:
      - otlp
      - jaeger
      - zipkin
  telemetry:
    metrics: # used to expose otelcol's own metrics
      address: ${env:MY_POD_IP}:8888